In PHP, a variable starts with the $ sign, followed by the name of the variable:
eg.
	<?php
		$txt = "Hello world!";
		$x = 5;
		$y = 10.5;
	?>

Unlike other programming languages, PHP has no command for declaring a variable. It is created the moment you first assign a value to it.

A variable can have a short name (like x and y) or a more descriptive name (age, carname, total_volume).

	Rules for PHP variables:

		A variable starts with the $ sign, followed by the name of the variable
		A variable name must start with a letter or the underscore character
		A variable name cannot start with a number
		A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )
		Variable names are case-sensitive ($age and $AGE are two different variables)

Remember that PHP variable names are case-sensitive!

TO OUTPUT VARIABLES:
echo $var1;

TO ADD 2 NUMBERS:
	<?php
		$x = 5;
		$y = 4;
		echo $x + $y;
	?>

STING CONCATENATION USING DOT(.) OPERATOR
	<?php
		$txt = "W3Schools.com";
		echo "I love " . $txt . "!";
	?>

PHP IS A LOOSELY TYPED LANGUAGE
	In the example above, notice that we did not have to tell PHP which data type the variable 		is.
	PHP automatically converts the variable to the correct data type, depending on its value.
	In other languages such as C, C++, and Java, the programmer must declare the name and type 		of the variable before using it.



PHP SCOPE
Global Scope
	<?php
        $x = 5; // global scope
    
        function myTest() {
            // using x inside this function will generate an error
            echo "<p>Variable x inside function is: $x</p>";
        }
        myTest();
    
        echo "<p>Variable x outside function is: $x</p>";
    ?>

Local Scope
	<?php
		function myTest() {
		    $x = 5; // local scope
		    echo "<p>Variable x inside function is: $x</p>";
		} 
		myTest();

		// using x outside the function will generate an error
		echo "<p>Variable x outside function is: $x</p>";
	?>



PHP THE GLOBAL KEYWORD:
	The global keyword is used to access a global variable from within a function.
	To do this, use the global keyword before the variables (inside the function):

	<?php
		$x = 5;
		$y = 10;

		function myTest() {
		    global $x, $y;
		    $y = $x + $y;
		}

		myTest();
		echo $y; // outputs 15
	?>

	PHP also stores all global variables in an array called $GLOBALS[index]. The index holds the name of the variable. This array is also accessible from within functions and can be used to update global variables directly.
	The example above can be rewritten like this:

	<?php
		$x = 5;
		$y = 10;

		function myTest() {
		    $GLOBALS['y'] = $GLOBALS['x'] + $GLOBALS['y'];
		} 

		myTest();
		echo $y; // outputs 15
	?>


PHP THE STATIC KEYWORD
	Normally, when a function is completed/executed, all of its variables are deleted. However, sometimes we want a local variable NOT to be deleted. We need it for a further job.
	To do this, use the static keyword when you first declare the variable:

	<?php
	    function myTest() {
	        static $x = 0;
	        echo $x;
	        $x++;
	    }

	    myTest();
	    myTest();
	    myTest();
	?>